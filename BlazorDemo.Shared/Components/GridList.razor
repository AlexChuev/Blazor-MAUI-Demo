@using BlazorDemo.Shared.Data
@using BlazorDemo.Shared.Data.Services
@implements IDisposable
@inject IssuesDataService IssuesDataService

<style>
    .my-grid {
        border-left: 0px;
        border-right: 0px;
        height: 100%;
    }

        .my-grid.dxbl-grid .dxbl-grid-table > tbody > tr > td {
            border-left-width: 0px;
        }

        .my-grid.dxbl-grid .dxbl-grid-table > thead > tr > th {
            border-left-width: 0px;
        }

        .my-grid.dxbl-grid .dxbl-grid-table > thead > tr > td {
            border-left-width: 0px;
        }

    .grid-btn-link {
        border: 0;
        display: inline;
        font: inherit;
        line-height: 100%;
        padding: 0;
        text-decoration: underline;
        vertical-align: baseline;
    }
</style>

<DxLayoutBreakpoint MaxWidth="750" @bind-IsActive="IsSmallDevice" />
<DxLayoutBreakpoint MinWidth="751" @bind-IsActive="IsLargeDevice" />

@if (IsSmallDevice || IsLargeDevice)
{
    <DxGrid @ref="Grid"
        Data="@DataSource"
        ShowFilterRow="true"
        CssClass="my-grid"
        PageSize="50"
        AutoExpandAllGroupRows="true"
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        CustomizeElement="Grid_CustomizeElement"
        CustomizeCellDisplayText="Grid_CustomizeCellDisplayText">
        <DataColumnGroupRowTemplate>
            <text>@(context.GroupValueDisplayText + " (" + context.SummaryDisplayText + ")")</text>
        </DataColumnGroupRowTemplate>
        <Columns>
            <DxGridDataColumn FieldName="Name" Caption="Subject" Width="@(IsLargeDevice ? null : "250")" MinWidth="250" AllowGroup="false">
                <CellDisplayTemplate>
                    @{
                        var issue = (context.DataItem as Issue);
                    }
                    @GetIssueTypeIconHtml(issue.Type)
                    <button class="btn btn-link grid-btn-link" @onclick="() => GotoDetailsViewClick(issue)">@(issue.Name)</button>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="ProjectID" Caption="Project" GroupIndex="0" Width="220px" TextAlignment="GridTextAlignment.Left" SortMode="GridColumnSortMode.DisplayText">
                <FilterRowCellTemplate>
                    <DxComboBox Value="(long?)context.FilterRowValue"
                            ValueChanged="(long? v) => context.FilterRowValue = v"
                            Data="ProjectList" ValueFieldName="ID" TextFieldName="Name"
                            FilteringMode="DataGridFilteringMode.Contains"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </FilterRowCellTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="CreatorID" Caption="Owner" Width="140px" MinWidth="100" TextAlignment="GridTextAlignment.Left" Visible="IsLargeDevice" SortMode="GridColumnSortMode.DisplayText">
                <FilterRowCellTemplate>
                    <DxComboBox Value="(long?)context.FilterRowValue"
                            ValueChanged="(long? v) => context.FilterRowValue = v"
                            Data="UserList" ValueFieldName="ID" TextFieldName="FullName"
                            FilteringMode="DataGridFilteringMode.Contains"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </FilterRowCellTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="OwnerID" Caption="Assignee" Width="140px" MinWidth="100" TextAlignment="GridTextAlignment.Left" SortMode="GridColumnSortMode.DisplayText">
                <FilterRowCellTemplate>
                    <DxComboBox Value="(long?)context.FilterRowValue"
                            ValueChanged="(long? v) => context.FilterRowValue = v"
                            Data="UserList" ValueFieldName="ID" TextFieldName="FullName"
                            FilteringMode="DataGridFilteringMode.Contains"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </FilterRowCellTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="Status" Caption="Status" Width="140px" MinWidth="140" TextAlignment="GridTextAlignment.Left">
                <FilterRowCellTemplate>
                    <DxComboBox Value="(IssueStatus?)context.FilterRowValue"
                            ValueChanged="(IssueStatus? v) => context.FilterRowValue = v"
                            Data="StatusList"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </FilterRowCellTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="CreatedDate" Caption="Created" Width="120px" MinWidth="120">
                <FilterRowCellTemplate>
                    <DxDateEdit Date="(DateTime?)context.FilterRowValue"
                            DateChanged="(DateTime? v) => context.FilterRowValue = v"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never" />
                </FilterRowCellTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="ModifiedDate" Caption="Modified" Width="120px" MinWidth="120" Visible="IsLargeDevice">
                <FilterRowCellTemplate>
                    <DxDateEdit Date="(DateTime?)context.FilterRowValue"
                            DateChanged="(DateTime? v) => context.FilterRowValue = v"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never" />
                </FilterRowCellTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="FixedDate" Caption="Fixed" Width="120px" MinWidth="120">
                <FilterRowCellTemplate>
                    <DxDateEdit Date="(DateTime?)context.FilterRowValue"
                            DateChanged="(DateTime? v) => context.FilterRowValue = v"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never" />
                </FilterRowCellTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="Priority" Caption=" " Width="80px" TextAlignment="GridTextAlignment.Center" AllowGroup="false" AllowSort="false">
                <CellDisplayTemplate>@GetIssuePriorityIconHtml((context.DataItem as Issue).Priority)</CellDisplayTemplate>
                <FilterRowCellTemplate Context="filterContext">
                    <DxButton RenderStyle="ButtonRenderStyle.Link" CssClass="p-0 w-100" Enabled="IsGridFiltered()" Click="@(() => Grid.ClearFilter())">Clear</DxButton>
                </FilterRowCellTemplate>
            </DxGridDataColumn>
        </Columns>
        <GroupSummary>
            <DxGridSummaryItem FieldName="ID" SummaryType="GridSummaryItemType.Count" />
        </GroupSummary>
        <TotalSummary>
            <DxGridSummaryItem FieldName="ID" SummaryType="GridSummaryItemType.Count" FooterColumnName="Name" />
        </TotalSummary>
    </DxGrid>
}



@code {
    IGrid Grid;
    IEnumerable<Issue> DataSource { get; set; }
    IEnumerable<Project> ProjectList { get; set; }
    IEnumerable<User> UserList { get; set; }
    static List<IssueStatus?> StatusList { get; set; } = ((IssueStatus[])Enum.GetValues(typeof(IssueStatus))).Cast<IssueStatus?>().ToList();
    readonly TaskCompletionSource<bool> dataLoadedTcs = new(TaskCreationOptions.RunContinuationsAsynchronously);
    bool IsSmallDevice { get; set; }
    bool IsLargeDevice { get; set; }

    [Parameter]
    public EventCallback<Issue> GotoDetailsView { get; set; }

    async Task GotoDetailsViewClick(Issue issue)
    {
        await GotoDetailsView.InvokeAsync(issue);
    }

    protected override async Task OnInitializedAsync()
    {
        ProjectList = await IssuesDataService.GetProjectsAsync();
        UserList = await IssuesDataService.GetUsersAsync();
        DataSource = await IssuesDataService.GetIssuesAsync();        
        dataLoadedTcs.TrySetResult(true);
    }

    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        if (e.FieldName == "ProjectID")
        {
            e.DisplayText = ProjectList.Where(p => p.ID == (long)e.Value).FirstOrDefault().Name;
        }
        else if (e.FieldName == "CreatorID" || e.FieldName == "OwnerID")
        {
            e.DisplayText = UserList.Where(u => u.ID == (long)e.Value).FirstOrDefault().FullName;
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.GroupRow)
        {
            
        }
    }

    public MarkupString GetIssuePriorityIconHtml(IssuePriority priority)
    {
        string priorytyClass = "warning";
        string title = "Medium";
        if (priority == IssuePriority.High)
        {
            priorytyClass = "danger";
            title = " High ";
        }
        if (priority == IssuePriority.Low)
        {
            priorytyClass = "info";
            title = " Low ";
        }
        string html = string.Format("<span class='badge bg-{0} py-1 px-2' title='{1} Priority'>{1}</span>", priorytyClass, title);
        return new MarkupString(html);
    }
    public MarkupString GetIssueTypeIconHtml(IssueType type)
    {
        string html = "";
        if (type == IssueType.Bug)
            html = "<span class='badge bg-danger py-1 px-2' title='Bug'>B</span>";
        return new MarkupString(html);
    }
    public bool IsGridFiltered()
    {
        return Grid.GetDataColumns().Any(c => c.FilterRowValue != null);
    }
    public void Dispose()
    {
        dataLoadedTcs.TrySetCanceled();
    }
}
